
namespace main;

class Connection {

	private main:main:MYSQL mysql;

	private func _query(String query) !main:main:MYSQL_RES {
		@ check = main:main:mysql_real_query(this.mysql, query.data, query.bytes);
		if(check != 0){
			throw failed_to_execute_query;
		}
		@ result = main:main:mysql_store_result(this.mysql);
		return result;
	}

	public func run(String query) ! {
		@ result = this._query(query) or pass;
	}

	public func first(String query) !?Map<?String> {
		@ result = this._all(query, true) or pass;
		@ x = result.get(0) or value null;
		return x;
	}

	public func all(String query) !Array<Map<?String>> {
		return this._all(query, false) or pass;
	}

	private func _all(String query, bool first) !Array<Map<?String>> {

		@ result = this._query(query) or pass;

		@ ret = Array<Map<?String>>.make(4);
		@ num_fields = main:main:mysql_num_fields(result);
		@ fields_ = main:main:mysql_fetch_fields(result);
		@ fields = Array<String>.make(num_fields);
		@ i = 0;
		while(i < num_fields) {
			@ field = cast fields_ as MYSQL_FIELD;
			fields.push(field.name.to_string());
			fields_ += sizeof(MYSQL_FIELD);
			i++;
		}
		while (true) {
			@ res = Map<?String>.make();
			@ row = main:main:mysql_fetch_row(result);
			ifnull row break;
		   	@ lengths = mysql_fetch_lengths(result);
			@ i = 0;
			@ adr = cast row as ptr;
			while(i < num_fields) {

				@ fn = fields.get(i) or value "?";
				@ cstrptr = getptrv adr as ptr;
				if(cstrptr == null){
					res.set(fn, null);
				} else {
					@ len = getptrv lengths as u64;
					@ data = String.make(cstrptr, len, false);
					res.set(fn, data);
				}

				adr += sizeof(ptr);
				lengths += sizeof(ptr);
				i++;
			}
			ret.push(res);
			if(first){
				break;
			}
		}

		return ret;
	}

	public func __before_free() {
		main:main:mysql_close(this.mysql);
	}

}
